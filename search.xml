<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>剑指offer</title>
      <link href="/2023/07/30/%E5%89%91%E6%8C%87offer/"/>
      <url>/2023/07/30/%E5%89%91%E6%8C%87offer/</url>
      
        <content type="html"><![CDATA[<h1 id="剑指-Offer-05-替换空格"><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格"></a><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/?envType=study-plan-v2&amp;envId=coding-interviews">剑指 Offer 05. 替换空格</a></h1><h2 id="方法1：原地修改"><a href="#方法1：原地修改" class="headerlink" title="方法1：原地修改"></a>方法1：原地修改</h2><h3 id="实现1：使用库函数replace"><a href="#实现1：使用库函数replace" class="headerlink" title="实现1：使用库函数replace"></a>实现1：使用库函数replace</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">replaceSpace</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (s.<span class="built_in">find</span>(<span class="string">&quot; &quot;</span>) != <span class="number">-1</span>) s.<span class="built_in">replace</span>(s.<span class="built_in">find</span>(<span class="string">&quot; &quot;</span>), <span class="number">1</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="实现2：双指针"><a href="#实现2：双指针" class="headerlink" title="实现2：双指针"></a>实现2：双指针</h3><ul><li>首先线性扫描统计愿串中的所有空格。记作count</li><li>然后增大原串的大小。</li><li>然后倒序进行遍历，i指针指向原串的最后一个位置，j指针指向s串扩充后的最后一个位置。如果当前遍历的s[i]串不为空格，则直接复制到相应的s[j]位置。否则需要将s[j - 2]、s[j - 1]、s[j]对应位置填充‘%’、‘2’、‘0’这3个字符，然后j -= 2.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">replaceSpace</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>, len = s.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s)</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27; &#x27;</span>) count++;</span><br><span class="line"></span><br><span class="line">        s.<span class="built_in">resize</span>(len + <span class="number">2</span> * count);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>, j = s.<span class="built_in">size</span>() - <span class="number">1</span>; i &lt; j; i--, j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                s[j] = s[i];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                s[j - <span class="number">2</span>] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">                s[j - <span class="number">1</span>] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">                s[j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                j -= <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="方法2：直接遍历"><a href="#方法2：直接遍历" class="headerlink" title="方法2：直接遍历"></a>方法2：直接遍历</h2><blockquote><p>需要准备一个空间较大的答案字符串ans, 然后直接线性扫描s串的同时，判断当前的字符是否为空格，如果为空格的话，则需要连续地在答案字符中添加”%20”， 否则直接拷贝当前的字符</p></blockquote></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">replaceSpace</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> c : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27; &#x27;</span>) ans += <span class="string">&quot;%20&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> ans += c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="剑指-Offer-58-II-左旋转字符串"><a href="#剑指-Offer-58-II-左旋转字符串" class="headerlink" title="剑指 Offer 58 - II. 左旋转字符串"></a><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/description/?envType=study-plan-v2&amp;envId=coding-interviews">剑指 Offer 58 - II. 左旋转字符串</a></h1><h2 id="方法1：直接使用substr函数来拼接"><a href="#方法1：直接使用substr函数来拼接" class="headerlink" title="方法1：直接使用substr函数来拼接"></a>方法1：直接使用substr函数来拼接</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseLeftWords</span><span class="params">(string s, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(n) + s.<span class="built_in">substr</span>(<span class="number">0</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="方法2：两次遍历"><a href="#方法2：两次遍历" class="headerlink" title="方法2：两次遍历"></a>方法2：两次遍历</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseLeftWords</span><span class="params">(string s, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">            ans += s[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            ans += s[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>使用求余优化成一次遍历<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseLeftWords</span><span class="params">(string s, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &lt; n + s.<span class="built_in">size</span>(); i++)</span><br><span class="line">            ans += s[i % s.<span class="built_in">size</span>()];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="方法3：3次翻转"><a href="#方法3：3次翻转" class="headerlink" title="方法3：3次翻转"></a>方法3：3次翻转</h2><blockquote><p> eg：将abcdefg 按照n = 2得到最终的串cdefgab？<br>    设字符串长度为len</p><ol><li>整个字符串进行翻转：gfedcba</li><li>翻转前len - n个字符：cdefgba</li><li>翻转后n个字符：cdefgab</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseLeftWords</span><span class="params">(string s, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">begin</span>() + s.<span class="built_in">size</span>() - n);</span><br><span class="line">        <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + s.<span class="built_in">size</span>() - n, s.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法及外挂</title>
      <link href="/2023/07/30/markdown%E8%AF%AD%E6%B3%95%E5%8F%8A%E5%A4%96%E6%8C%82/"/>
      <url>/2023/07/30/markdown%E8%AF%AD%E6%B3%95%E5%8F%8A%E5%A4%96%E6%8C%82/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一篇博客文章"><a href="#这是我的第一篇博客文章" class="headerlink" title="这是我的第一篇博客文章"></a>这是我的第一篇博客文章</h2><div class="note primary simple"><p>本文主要学习markdown语法以及外挂语法</p></div><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 写作必备技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++语法学习</title>
      <link href="/2023/07/30/CPlusPlus%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/07/30/CPlusPlus%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="C-语法学习"><a href="#C-语法学习" class="headerlink" title="C++语法学习"></a>C++语法学习</h1><h2 id="C-基础入门"><a href="#C-基础入门" class="headerlink" title="C++基础入门"></a>C++基础入门</h2><h3 id="1-C-初识"><a href="#1-C-初识" class="headerlink" title="1. C++初识"></a>1. C++初识</h3><h4 id="1-1-第一个c-c程序：输出hello-world"><a href="#1-1-第一个c-c程序：输出hello-world" class="headerlink" title="1.1 第一个c++c程序：输出hello world!!!"></a>1.1 第一个c++c程序：输出hello world!!!</h4><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello world!!!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h4><ul><li>单行注释：<code>//</code></li><li>多行注释：<code>/**/</code><h4 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h4></li><li>意义：给一段指定的内存空间取别名，方便操作这段内存</li><li>语法：<code>数据类型 变量名 初始值;</code><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;在一个大小为<span class="number">4</span>字节的空间存储数字<span class="number">10</span>，这段空间的起始地址为a</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h4 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4 常量"></a>1.4 常量</h4></li><li>作用：用于记录程序中不可更改的数据</li><li>C++定义常量方式：<ul><li><code>#define 宏常量：#define 常量名 常量值</code><ul><li>通常文件上方定义，表示一个常量</li></ul></li><li>const修饰的变量const数据类型 变量名 = 常量值<ul><li>通常在变量前加关键字const, 修饰该变量为常量，不可更改(告知编译器) </li></ul></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> day 7</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h4><ul><li>作用：关键字是C++预先保留的单词(标识符)</li><li><strong>在定义变量名或者常量名的时候，不要用关键字</strong></li></ul><div class="table-container"><table><thead><tr><th>asm</th><th>do</th><th>if</th><th>return</th><th>typedef</th></tr></thead><tbody><tr><td>auto</td><td>double</td><td>inline</td><td>short</td><td>typeid</td></tr><tr><td>bool</td><td>dynamic_cast</td><td>int</td><td>signed</td><td>typename</td></tr><tr><td>break</td><td>else</td><td>long</td><td>sizeof</td><td>union</td></tr><tr><td>case</td><td>enum</td><td>mutable</td><td>static</td><td>unsigned</td></tr><tr><td>catch</td><td>explicit</td><td>namespace</td><td>static_cast</td><td>using</td></tr><tr><td>char</td><td>export</td><td>new</td><td>struct</td><td>virtual</td></tr><tr><td>class</td><td>extern</td><td>operator</td><td>switch</td><td>void</td></tr><tr><td>const</td><td>false</td><td>private</td><td>template</td><td>volatile</td></tr><tr><td>const_cast</td><td>float</td><td>protected</td><td>this</td><td>wchar_t</td></tr><tr><td>continue</td><td>for</td><td>public</td><td>throw</td><td>while</td></tr><tr><td>default</td><td>friend</td><td>register</td><td>true</td><td></td></tr><tr><td>delete</td><td>goto</td><td>reinterpret_cast</td><td>try</td></tr></tbody></table></div><p><code>提示：在给常量或者变量起名称时候，不要用C++关键字，否则会产生歧义。</code></p><h4 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h4><p><strong>作用</strong>: C++规定给标识符（变量、常量）命名时，有一套自己的规则</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写<blockquote><p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p></blockquote></li></ul><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="type">int</span> = <span class="number">10</span>;<span class="comment">//错误</span></span><br><span class="line">    <span class="type">int</span> <span class="number">1223</span>adb = <span class="number">40</span>;<span class="comment">//错误</span></span><br><span class="line">    <span class="type">int</span> aa = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; AA &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2. 数据类型"></a>2. 数据类型</h3><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p><h4 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h4><p><strong>作用</strong>：整型变量表示的是整数类型的数据<br>C++中能够表示整形的类型有以下几种方式，<strong>区别在于</strong>所占内存空间不同：</p><div class="table-container"><table><thead><tr><th>数据类型</th><th>占用空间</th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>(-2^15~2^15-1)</td></tr><tr><td>int(整型)</td><td>4字节</td><td>(-2^31~2^31-1)</td></tr><tr><td>long(长整型)</td><td>Windows为4字节，Linux为子4字节(32位)，8字节(32位)</td><td>(-2^31~2^31-1)</td></tr><tr><td>long long(长长整型)</td><td>8字节</td><td>(-2^63~2^63-1)</td></tr></tbody></table></div><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">short</span> d = <span class="number">8</span>;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">long</span> b = <span class="number">40</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> c = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;d = &quot;</span> &lt;&lt; d &lt;&lt; endl;<span class="comment">//(-32768~32767) d = 32768, 输出为-32768</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h4><p><strong>作用</strong>：利用sizeof关键字可以统计数据类型所占空间大小<br><strong>语法</strong>：<code>sizeof(数据类型 / 变量)</code><br><strong>示例</strong>：<br><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">short</span> d = <span class="number">8</span>;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">long</span> b = <span class="number">40</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> c = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//(-32768~32767) d = 32768, 输出为-32768</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;d占用空间内存= &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(d) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a占用空间内存= &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b占用空间内存= &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(b) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c占用空间内存= &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(c) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>总结：short &lt; int &lt;= long &lt;= long long</code></p><h4 id="2-3-实型-浮点型"><a href="#2-3-实型-浮点型" class="headerlink" title="2.3 实型(浮点型)"></a>2.3 实型(浮点型)</h4><p><strong>作用</strong>：用于表示小数</p><p>浮点型变量分为两种：</p><ol><li>单精度float</li><li>双精度double</li></ol><p>两者的<strong>区别</strong>在于表示的数字范围不同。</p><div class="table-container"><table><thead><tr><th>数据类型</th><th>占用空间</th><th>有效数字范围</th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double</td><td>8字节</td><td>16-56位有效数字</td></tr></tbody></table></div><p><strong>示例</strong>：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">float</span> f1 = <span class="number">3.1415925f</span>;</span><br><span class="line">    <span class="type">double</span> d1 = <span class="number">3.1415925</span><span class="comment">//编辑器默认把小数当成高精度，并且默认会显示6位有效数字</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; f1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; d2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;float 占用空间：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">float</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;double 占用空间：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">double</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//科学计数法</span></span><br><span class="line">    <span class="type">float</span> f2 = <span class="number">2e2</span>;<span class="comment">//3 * 10 ^ 2</span></span><br><span class="line">    cout &lt;&lt; f2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> f3 = <span class="number">2e-2</span><span class="comment">//2 * 0.1 ^ 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h4><p><strong>作用</strong>：字符变量用于显示单个字符<br><strong>语法</strong>：`char ch = ‘a’;</p><blockquote><p>注意1：C和C++字符串变量中用于显示单个字符<br>注意2：单引号只能有一个字符，不可以是字符串</p></blockquote><ul><li>C和C++中字符串变量只占用一个字节</li><li>字符串变量并不是把字符放到内存中存储，而是将对应的ASCII编码放到存储单元中</li></ul><p><strong>示例</strong>：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 字符型创建变量方式</span></span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符型变量所占的内存大小</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符型变量常见的错误</span></span><br><span class="line">    <span class="type">char</span> ch1 = <span class="string">&#x27;abs&#x27;</span>;<span class="comment">//错误，单引号中只能存放一个字符</span></span><br><span class="line">    <span class="type">char</span> ch2 = <span class="string">&quot;a&quot;</span>;<span class="comment">//错误，必须是单引号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符型变量的ASCII编码值</span></span><br><span class="line">    cout &lt;&lt; (<span class="type">int</span>)ch &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// a-97</span></span><br><span class="line">    <span class="comment">// A-65</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>ASCII可显示字符<br>可显示字符编号从32-126（0x20-0x7E）， 共95个字符<br><img src="https://www.runoob.com/wp-content/uploads/2022/03/ascii-1-1.png" alt="可显示字符"></p><p>控制字符<br>ASCII控制字符的编号范围是0-31和127（0x00-0x1F和0x7F），共33个字符<br><img src="https://www.runoob.com/wp-content/uploads/2022/03/ascii-2-1.png" alt="控制字符"></p><h4 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h4><p><strong>作用</strong>：用于表示一些不能显示出来的ASCII字符<br>现阶段我们常用的转移字符有：<code>\t \\ \n</code></p><div class="table-container"><table><thead><tr><th>转义字符</th><th>含义</th><th>有效数字范ASCII码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>警报</td><td>007</td></tr><tr><td>\b</td><td>退格（BS），将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移动到下页开头</td><td>012</td></tr><tr><td><strong>\n</strong></td><td><strong>换行（LF），将当前位置移动到下行开头</strong></td><td><strong>010</strong></td></tr><tr><td>\r</td><td>回车（CR），将当前位置移动到本行开头</td><td>013</td></tr><tr><td><strong>\t</strong></td><td><strong>水平制表（HT），跳到下一个tab位置</strong></td><td><strong>009</strong></td></tr><tr><td>\v</td><td>竖直制表（VT）</td><td>011</td></tr><tr><td>\ \</td><td><strong>代表一个反斜杠”\”</strong></td><td><strong>092</strong></td></tr><tr><td>\ ‘</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>\ “</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>\ ?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\ 0</td><td>数字0</td><td>000</td></tr><tr><td>\ddd</td><td>八进制转义字符，d范围0~7</td><td>3位八进制</td></tr><tr><td>\xhh</td><td>十六进制转义字符，范围0~9, a~f, A~F</td><td>3位十六进制</td></tr></tbody></table></div><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><h2 id="提高"><a href="#提高" class="headerlink" title="提高"></a>提高</h2>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
